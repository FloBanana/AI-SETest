buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:2.6'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'

// imports for DockerTasks
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage


jar {
    baseName = 'product-composite-service'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'hawai'
mainClassName = 'se.callista.microservices.composite.product.ProductCompositeServiceApplication'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // Can't find spring-cloud-build in maven central...
        url 'http://maven.springframework.org/release'
    }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.cloud:spring-cloud-starter-hystrix:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-eureka:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:1.0.0.RELEASE")


    /*
    Don't use maven dependencies but direct project dependencies:
    */
    compile project(":product-service")
    compile project(":recommendation-service")
    compile project(":review-service")
    compile project(":util")


    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'org.testng:testng:6.9.6'
    testCompile 'com.jayway.restassured:rest-assured:2.5.0'
}


/**
 * Setup docker task
 */
docker {
    /* TODO !IMPORTANT!
     * set this to you desired docker daemon. In case of local docker via docker-toolbox
     * find out the ip of your docker-machine via 'docker-machine url default'
     * TODO: Keep the https:// !
     */
    url = 'https://192.168.99.100:2376'
    // set path to the certificate directory on your machine
    certPath = new File(System.properties['user.home'],'/.docker/machine/machines/default')

    registryCredentials {
        url = 'https://artifactory.mars.haw-hamburg.de:5002'
        username = '<DeineHAWKennung>'
        password = '<DeinHAWPasswort>'
        email = '<DeineHAWMailAdresse>'
    }

}

/**
 * Setup TestNG
 */

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
}

/**
 * Define tasks
 */

/**
 * Makes sure, we have the correct version of gradle bundled
 */
task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

/**
 * This task copies the tar file created by the distTar task from
 * the distributions folder to the docker folder. The distTar task
 * in return is called from the build task, which is a dependency
 * of this task.
 */
task copyDist(type: Copy, dependsOn: [build, wrapper]) {
    from('build/distributions/' + jar.baseName + '.tar')
    into('build/docker')
}


/**
 * This task creates the Dockerfile needed to create the Docker image.
 * It inherits the java:8 docker image, sets some Spring Docker Profile variable,
 * exposes port 8080 to the outer world and adds our tar file as content at the
 * root path of the image.
 */
task createDockerfile(type: Dockerfile, dependsOn: [copyDist]) {
    destFile = project.file('build/docker/Dockerfile')
    from 'java:8'
    maintainer 'Christian Huening "christian.huening@haw-hamburg.de"'
    environmentVariable('JAVA_OPTS', '-Dspring.profiles.active=docker')
    exposePort(8080)
    entryPoint("/product-composite-service/bin/product-composite-service")
    addFile({
        jar.baseName + '.tar'
    }, {
        '/'
    })

}

/**
 * This task actually creates the image from the Dockerfile
 */
task buildImage(type: DockerBuildImage, dependsOn: [createDockerfile]) {
    inputDir = file('build/docker')
    tag = 'product-composition-service'
}

/**
 * Will be run on the CI Server (bamboo)
 */
task buildAll(dependsOn: [buildImage]) {

}

