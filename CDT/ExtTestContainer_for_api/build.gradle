/**
 * This is main build script for the whole example application.
 * To execute the whole build pipeline run 'gradlew buildAll'
 * from a command line in the directory this file is located in.
 * Hint: Make sure your Docker Daemon is running and listening
 * on the configured IP:PORT (default: 192.168.99.100:2376, can be
 * checked with 'docker-machine url default').
 *
 * File created and maintained by:
 * Christian Hüning - christian.huening@haw-hamburg.de
 */


/**
 * Define general parameters, dependencies and repositories for the build script
 */
buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:2.6'
    }
}

/**
 * Load several plugins, consult the gradle documentation for more info
 */
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

// imports for DockerTasks
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage



/**
 * Define the name and version of the resulting jar file
 */
jar {
    baseName = 'ExtTestContainer_for_api'
    version = '0.0.1-SNAPSHOT'
}


/**
 * Define source and target java version compatibility
 */
sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'hawai'
//mainClassName = 'de.haw.hamburg.hawai.cdt.ProductApiServiceApplication'

/**
 * Setup library repositories
 */
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // Can't find spring-cloud-build in maven central...
        url 'http://maven.springframework.org/release'
    }
}

sourceSets {
    consumerDrivenTest {
        java.srcDir file('src/consumerDrivenTest/java')
        resources.srcDir file('src/consumerDrivenTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}


dependencies {
    //testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'org.testng:testng:6.9.6'
    testCompile 'com.jayway.restassured:rest-assured:2.5.0'
}




/**
 * Setup docker task
 */
docker {
    /* TODO !IMPORTANT!
     * set this to you desired docker daemon. In case of local docker via docker-toolbox
     * find out the ip of your docker-machine via 'docker-machine url default'
     * TODO: Keep the https:// !
     */
    url = 'https://192.168.99.100:2376'
    // set path to the certificate directory on your machine
    certPath = new File(System.properties['user.home'],'/.docker/machine/machines/default')

    registryCredentials {
        url = 'https://artifactory.mars.haw-hamburg.de:5002'
    }

}

/**
 * Setup Tests
 */

test {
    // enable TestNG support (default is JUnit)
    useTestNG()

    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}





/**
 * Define tasks
 */


task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

/**
 * This task copies the tar file created by the distTar task from
 * the distributions folder to the docker folder. The distTar task
 * in return is called from the build task, which is a dependency
 * of this task.
 */
task copyDist(type: Copy, dependsOn: [build, wrapper]) {
    from('build/distributions/' + jar.baseName + '.tar')
    into('build/docker/')
    from('build/resources/main/truststore.jks')
    into('build/docker/')
}


/**
 * This task creates the Dockerfile needed to create the Docker image.
 * It inherits the java:8 docker image, sets some Spring Docker Profile variable,
 * exposes port 8080 to the outer world and adds our tar file as content at the
 * root path of the image.
 */
task createDockerfile(type: Dockerfile, dependsOn: [copyDist]) {
    destFile = project.file('build/docker/Dockerfile')
    from 'java:8'
    maintainer 'Christian Hüning "christian.huening@haw-hamburg.de"'
    environmentVariable('JAVA_OPTS', '-Dspring.profiles.active=docker -Djavax.net.ssl.trustStore=truststore.jks -Djavax.net.ssl.trustStorePassword=password')
    exposePort(8080)
    entryPoint("/product-api-service/bin/product-api-service")
    // copy truststore file into container. It's needed by OAuth
    addFile({
        'truststore.jks'
    }, {
        'truststore.jks'
    })
    // Copy contents from the build output's .tar file into container
    // the ADD command in docker takes a .tar file and extracts it into
    // the given folder in the container. In this case '/'
    addFile({
        jar.baseName + '.tar'
    }, {
        '/'
    })

}

task cdTest(type: Test, dependsOn: [createDockerfile]) {
    useTestNG()
    testClassesDir = sourceSets.consumerDrivenTest.output.classesDir
    classpath = sourceSets.consumerDrivenTest.runtimeClasspath

    reports.html.destination = file("$reports.html.destination/cdt")
    reports.junitXml.destination = file("$reports.junitXml.destination/cdt")
}


/**
 * This task builds the actual image of this service by using the previously
 * created Dockerfile from the ./build/docker folder and applying a talking tag
 * to the image
 */
task buildImage(type: DockerBuildImage, dependsOn: [createDockerfile]) {
    inputDir = createDockerfile.destFile.parentFile
    tag = 'artifactory.mars.haw-hamburg.de:5002/exttestcontainer_for_api'
}

/**
 * Pushes the container image to the MARS Artifactory repository
 */
task pushImage(type: DockerPushImage, dependsOn: [buildImage]){
    imageName = buildImage.tag
    tag = "latest"
}

/**
 * Start this task to kick off the build.
 * It'll build this project and all sup-projects, as well as
 * run the local Unit Tests and create Docker images for each
 * project, if all was well.
 */
task buildAll(dependsOn: [pushImage]){

}


tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}